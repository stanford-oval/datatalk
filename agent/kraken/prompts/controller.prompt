# instruction
Your task is to write a **{{ database_type }}** query to answer the given question. Follow a step-by-step process:

1. User question is contextual. If needed, the current date is {{ curr_date }}
2. Start by constructing simple fragments of the **{{ database_type }}** query.
3. Execute each fragment to verify its correctness. Adjust as needed based on your the observations.
4. Confirm all your assumptions about the structure of the database before proceeding.
5. Do NOT repeat the same action, as the results will be the same.
6. You will always be shown with a sample of database results. If user is asking for all entries, entire results will be displayed in a seperate module.
8. Output one final SQL at the end that contains all results.
{% if 'entity_linking' in available_actions and 'location_linking' in available_actions %}
9. If entity_linking or location_linking has been called before, use the output to revise filtering clauses in subsequent SQL. Assume that the output of those actions accurately resolves the entity/location requested in the user's question.
10. If you construct a SQL query using a variable stored by entity_linking, assume the variable stores a list formatted as ('x', 'y', 'z'). You can use this in filters using clauses such as 'WHERE column_name IN variable_name'.
11. If you filter entities on a variable stored by entity_linking, you should also append a LIKE clause on the original search string - combine set-based filtering from entity_linking with pattern matching to resolve entities.
{% elif 'entity_linking' in available_actions %}
9. If entity_linking has been called before, use the output to revise filtering clauses in subsequent SQL. Assume that the output of entity_linking accurately resolves the entity requested in the user's question.
10. If you construct a SQL query using a variable stored by entity_linking, assume the variable stores a list formatted as ('x', 'y', 'z'). You can use this in filters using clauses such as 'WHERE column_name IN variable_name'.
11. If you filter entities on a variable stored by entity_linking, you should also append a LIKE clause on the original search string - combine set-based filtering from entity_linking with pattern matching to resolve entities.
{% elif 'location_linking' in available_actions %}
9. If location_linking has been called before, use the output to revise filtering clauses in subsequent SQL. Assume that the output of location_linking accurately resolves the location requested in the user's question.
{% endif %}


Form exactly one "Thought" and perform exactly one "Action", then wait for the "Observation".

Possible actions are:

{% if database_type == 'sparql' %}
- search_graph(search_str): Retrieves entities in the graph according to a search string.
- execute_sparql(sparql): Runs a SPARQL query and returns results.
- fetch_incoming_outgoing_edges(node_id): Retrieve the outgoing and incoming property names of a given database.
- stop(): Marks the last executed SPARQL query as the final answer and ends the process. You can directly use this if user is not engaged in database-related conversation but instead just chit-chatting.
{% else %}
- get_tables(): Retrieves all the tables with a corresponding short description. **You should use this action to get the available tables**
- retrieve_tables_details([table_names]): Retrieve more details about table(s). The argument should be a list of table names as strigns. // Example: retrieve_tables_details(["table1"]) or retrieve_tables_details(["table1", "table2"])
- execute_sql(sql): Runs a SQL query and returns results. 
{% if 'entity_linking' in available_actions %}
- entity_linking(search_str, column_name_lst): Retrieves all entities from the specified columns that refer to the same thing as the search string. The search string is the part of the user's query referring to an entity and it should be enclosed in single quotes (') as a Python string. The columns in the column list should be formatted as '{database_name}.{column_name}' and enclosed in brackets ([]) as a Python list. For ease of parsing, the argument is one Python tuple containing the two inputs (the search string, then the column list). // Example: entity_linking(('student protestors', ['stanford_api_data.event_type', 'stanford_api_data.disorder_type'])).
{% endif %}
{% if 'location_linking' in available_actions %}
- location_linking(search_str_lst): Resolves location filters by returning a dictionary of filtering clauses to represent each search location specified in the user's query. Input is a Python list containing each search string from the user's question that specifies a location. // Example: location_linking(["Egypt", "Middle-East", "Northern africa"]) 
{% endif %}
- stop(): Marks the last executed SQL query as the final answer and ends the process. You can directly use this if user is not engaged in database-related conversation but instead just chit-chatting.
{% endif %}

{% if suql_enabled %}
The SQL query contains two User Defined Functions (UDFs) that you can use when writing SQL query:
1. `summary(column_name)`: Returns the summary of a column that contains list of text data.
2. `answer(column_name, question)`: Returns the answer to a question based on the column data.

Example of using answer UDF:
Question: Show me some NLP courses.
SQL: SELECT title, course_codes, description FROM courses WHERE answer("Description", 'is this an NLP course?') = 'Yes';

Example of using summary UDF:
Question: Show me a family-friendly restaurant that has burgers in D.C.
Target: SELECT *, answer("Reviews", 'is this restaurant family-friendly?'), summary("Reviews") FROM restaurants WHERE answer("Reviews", 'do you find this restaurant to be family-friendly?') = 'Yes' AND answer("Popular_dishes", 'does this restaurant serve burgers') = 'Yes' AND location = 'D.C.' LIMIT 1;
{% endif %}
# input
Prior turn contexts:
--
{% for i in range(0, conversation_history|length) %}
User Question: {{ conversation_history[i]["question"] }}

Action history:
{% for j in range(0, conversation_history[i]["action_history"]|length) %}
{{ conversation_history[i]["action_history"][j] }}
{% endfor %}

Agent Response: {{ conversation_history[i]["response"] }}
--
{% endfor %}
Current-turn User Question: {{ question }}

{% if action_history %}
Action history:
{% for i in range(0, action_history|length) %}

{{ action_history[i] }}
{% endfor %}
{% endif %}

# Domain-specific instructions for this database:
{% for i in range(0, domain_specific_instructions|length)%}
- {{ domain_specific_instructions[i] }}
{% endfor %}

Output one "Thought" and one "Action":